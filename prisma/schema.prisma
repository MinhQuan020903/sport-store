generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                     Int             @id @default(autoincrement())
  name                   String
  email                  String          @unique
  password               String
  role                   String?         @default("user")
  avatar                 String?         @default("https://i0.wp.com/www.repol.copl.ulaval.ca/wp-content/uploads/2019/01/default-user-icon.jpg?ssl=1")
  isEmailVerified        Boolean         @default(false)
  otp                    String?
  isOnline               Boolean         @default(false)
  lastSeen               DateTime?
  orders                 Order[]
  reviews                Review[]
  shoppingCart           ShoppingCart?
  payments               Payment[]
  wishlist               Wishlist?
  directMessages         DirectMessage[]
  conversationsInitiated Conversation[]  @relation("userOne")
  conversationsReceived  Conversation[]  @relation("userTwo")
  seenMessages           SeenMessage[]
  wallets                Wallet[]
  addresses              Address[]
}

model Address {
  id          Int     @id @default(autoincrement())
  city        String
  district    String
  ward        String
  street      String
  houseNumber String
  userId      Int
  selected    Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Wallet {
  id      Int    @id @default(autoincrement())
  userId  Int
  address String @unique
  user    User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Product {
  id            Int           @id @default(autoincrement())
  description   String        @db.LongText
  price         Float
  sale          Float?
  thumbnail     String?       @db.LongText
  images        String?       @db.LongText
  categoryId    Int?
  typeId        Int?
  subcategoryId Int?
  genderId      Int?
  name          String
  isdeleted     Boolean
  category      Category?     @relation(fields: [categoryId], references: [id])
  type          ProductType?  @relation(fields: [typeId], references: [id])
  subcategory   Subcategory?  @relation(fields: [subcategoryId], references: [id])
  gender        Gender?       @relation(fields: [genderId], references: [id])
  reviews       Review[]
  orderItems    OrderItem[]
  sales         Sale[]
  wishlists     Wishlist[]
  CartItem      CartItem[]
  productSizes  ProductSize[]

  @@index([categoryId])
  @@index([typeId])
  @@index([subcategoryId])
  @@index([genderId])
}

model ProductSize {
  id        Int      @id @default(autoincrement())
  size      String
  productId Int?
  quantity  Int
  product   Product? @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model ProductType {
  id          Int           @id @default(autoincrement())
  name        String
  products    Product[]
  Subcategory Subcategory[]
}

model Subcategory {
  id            Int         @id @default(autoincrement())
  name          String
  productTypeId Int
  productType   ProductType @relation(fields: [productTypeId], references: [id])
  products      Product[]

  @@index([productTypeId])
}

model Gender {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Review {
  id         Int      @id @default(autoincrement())
  text       String   @db.LongText
  rating     Int
  userId     Int
  productId  Int
  images     String?  @db.LongText
  reviewDate DateTime
  title      String
  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

model Sale {
  id        Int       @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  products  Product[]
}

model Order {
  id                 Int         @id @default(autoincrement())
  orderDate          DateTime    @default(now())
  total              Float
  userId             Int?
  status             String      @default("Pending")
  address            String
  anonymousUser      String?
  anonymousUserEmail String?
  anonymousUserName  String?
  user               User?       @relation(fields: [userId], references: [id])
  orderItems         OrderItem[]

  @@index([userId])
}

model OrderItem {
  id           Int     @id @default(autoincrement())
  quantity     Int
  productId    Int
  orderId      Int
  selectedSize String? @db.VarChar(255)
  product      Product @relation(fields: [productId], references: [id])
  order        Order   @relation(fields: [orderId], references: [id])

  @@index([productId])
  @@index([orderId])
}

model ShoppingCart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]

  @@index([userId])
}

model CartItem {
  id             Int          @id @default(autoincrement())
  quantity       Int
  productId      Int
  shoppingCartId Int
  selectedSize   String       @db.VarChar(255)
  product        Product      @relation(fields: [productId], references: [id])
  shoppingCart   ShoppingCart @relation(fields: [shoppingCartId], references: [id])

  @@index([shoppingCartId])
  @@index([productId])
}

model Payment {
  id            Int      @id @default(autoincrement())
  paymentMethod String
  amount        Float
  paymentDate   DateTime
  userId        Int
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Promotion {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  discount    Float
  couponCodes CouponCode[]
}

model CouponCode {
  id             Int       @id @default(autoincrement())
  code           String
  discount       Float
  expirationDate DateTime
  promotionId    Int
  promotion      Promotion @relation(fields: [promotionId], references: [id])

  @@index([promotionId])
}

model Wishlist {
  id       Int       @id @default(autoincrement())
  userId   Int       @unique
  user     User      @relation(fields: [userId], references: [id])
  products Product[]

  @@index([userId])
}

model Conversation {
  id             String          @id @default(uuid())
  userOneId      Int
  userTwoId      Int
  lastMessageAt  DateTime
  lastMessage    String?
  userOne        User            @relation("userOne", fields: [userOneId], references: [id], onDelete: Cascade)
  userTwo        User            @relation("userTwo", fields: [userTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([userOneId, userTwoId])
  @@index([userTwoId])
}

model DirectMessage {
  id             String        @id @default(uuid())
  content        String        @db.Text
  fileUrl        String?       @db.Text
  userId         Int
  conversationId String
  deleted        Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  seenBy         SeenMessage[]

  @@index([userId])
  @@index([conversationId])
}

model SeenMessage {
  userId          Int
  directMessageId String
  seenAt          DateTime?
  id              String        @id
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  directMessage   DirectMessage @relation(fields: [directMessageId], references: [id], onDelete: Cascade)

  @@unique([userId, directMessageId])
  @@index([directMessageId])
}

model ProductToSale {
  A Int
  B Int

  @@unique([A, B], map: "_ProductToSale_AB_unique")
  @@index([B], map: "_ProductToSale_B_index")
  @@map("_ProductToSale")
}

model ProductToWishlist {
  A Int
  B Int

  @@unique([A, B], map: "_ProductToWishlist_AB_unique")
  @@index([B], map: "_ProductToWishlist_B_index")
  @@map("_ProductToWishlist")
}
